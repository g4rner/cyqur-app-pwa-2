var db={};window.indexedDB=window.indexedDB||window.webkitIndexedDB||window.mozIndexedDB,"webkitIndexedDB"in window&&(window.IDBTransaction=window.webkitIDBTransaction,window.IDBKeyRange=window.webkitIDBKeyRange||window.IDBKeyRange);const getObjectStore=(e,r,t)=>db.transaction(e,r).objectStore(t),openDB=(e,r,t,o,s)=>{const n=indexedDB.open(e,r);n.onupgradeneeded=t,n.onsuccess=()=>{db=n.result,o()},n.onerror=({target:{error:{message:e}}})=>reject(e)},addToDatabase=(e,r,t,o)=>new Promise((s,n)=>{const a=getObjectStore(r,o,t).add(e);a.onsuccess=({target:{result:e}})=>s(e),a.onerror=({target:{error:{message:e}}})=>n(e)}),deleteItemFromDatabase=(e,r,t,o)=>new Promise((s,n)=>{const a=getObjectStore(r,o,t).delete(e);a.onsuccess=s,a.onerror=({target:{error:{message:e}}})=>n(e)}),readAll=(e,r,t,o,s)=>{var n=getObjectStore(r,"readwrite",t);n.openCursor(e).onsuccess=o,n.openCursor(e).onerror=s},countItems=(e,r,t)=>new Promise((o,s)=>{const n=getObjectStore(e,r,t).count();n.onsuccess=()=>o(n.result),n.onerror=({target:{error:{message:e}}})=>s(e)}),updateItem=(e,r,t,o,s)=>new Promise((n,a)=>{const c=getObjectStore(t,s,o),d=c.get(e);d.onsuccess=e=>{const t={...e.target.result,...r},o=c.put(t);o.onsuccess=()=>n("success"),o.onError=()=>a},d.onError=({target:{error:{message:e}}})=>a(e)}),getItem=(e,r,t,o)=>new Promise((s,n)=>{const a=getObjectStore(r,o,t).get(e);a.onsuccess=({target:{result:e}})=>s(e),a.onError=({target:{error:{message:e}}})=>n(e)}),getAllbyKeys=async(e,r,t,o)=>await Promise.all(e.map(e=>getItem(e,r,t,o))),deleteAllByKey=(e,r,t,o,s)=>new Promise((n,a)=>{const c=getObjectStore(r,o,t).index(s).getAll(e);c.onsuccess=async({target:{result:e}})=>{await Promise.all(e.map(e=>deleteItemFromDatabase(e.packetId,r,t,o))),n("Successfully deleted data")},c.onError=({target:{error:{message:e}}})=>a(e)}),tables=[CHAIN,PACKET,USER_INFO],getAll=(e,r,t)=>new Promise((o,s)=>{const n=getObjectStore(e,t,r).getAll();n.onsuccess=({target:{result:e}})=>o(e),n.onError=({target:{error:{message:e}}})=>s(e)}),getEverything=async()=>await Promise.all(tables.map(e=>{return r=e,t=e,o=READWRITE,new Promise((e,s)=>{const n=getObjectStore(r,o,t).getAll();n.onsuccess=({target:{result:r}})=>e(r),n.onError=({target:{error:{message:e}}})=>s(e)});var r,t,o})),addAll=async(e,r)=>await Promise.all(e.map(e=>{return t=e,o=r,s=r,n=READWRITE,new Promise((e,r)=>{const a=getObjectStore(o,n,s).add(t);a.onsuccess=({target:{result:r}})=>e(r),a.onerror=({target:{error:{message:e}}})=>r(e)});var t,o,s,n})),deleteAllDataFromDB=()=>new Promise((e,r)=>{db.close();const t=window.indexedDB.deleteDatabase(DB_NAME);t.onsuccess=e("Successfully deleted"),t.onError=({target:{error:{message:e}}})=>r(e)}),globalPromiseRejectionHandler=({reason:e})=>{console.log(`Error: ${e}`)};window.onunhandledrejection=globalPromiseRejectionHandler;