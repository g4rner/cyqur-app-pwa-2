const version="v1.0000050",config={cacheRemote:!0,version:version+"::",preCachingItems:["./c_assets/html/offline.html","./c_assets/html/404.html","./minjs/sw.js"],blacklistCacheItems:["../c_index.html"],offlineImage:'<svg role="img" aria-labelledby="offline-title" viewBox="0 0 400 300" xmlns="http://www.w3.org/2000/svg"><title id="offline-title">Offline</title><g fill="none" fill-rule="evenodd"><path fill="#aaa" d="M0 0h400v300H0z"/><text fill="#222" font-family="monospace" font-size="32" font-weight="bold"><tspan x="136" y="156">offline</tspan></text></g></svg>',offlinePage:"./c_assets/html/offline.html",notFoundPage:"./c_assets/html/404.html"};function cacheName(key,opts){return`${opts.version}${key}`}function addToCache(cacheKey,request,response){if(response.ok){const copy=response.clone();caches.open(cacheKey).then(cache=>{cache.put(request,copy)})}return response}function fetchFromCache(event){return caches.match(event.request).then(response=>{if(!response)throw Error(`${event.request.url} not found in cache`);return 404===response.status?caches.match(config.notFoundPage):response})}function offlineResponse(resourceType,opts){return"content"===resourceType?caches.match(opts.offlinePage):"image"===resourceType?new Response(opts.offlineImage,{headers:{"Content-Type":"image/svg+xml"}}):void 0}self.addEventListener("install",event=>{event.waitUntil(caches.open(cacheName("static",config)).then(cache=>cache.addAll(config.preCachingItems)).then(()=>self.skipWaiting()))}),self.addEventListener("activate",event=>{function clearCacheIfDifferent(event,opts){return caches.keys().then(cacheKeys=>{const oldCacheKeys=cacheKeys.filter(key=>0!==key.indexOf(opts.version)),deletePromises=oldCacheKeys.map(oldKey=>caches.delete(oldKey));return Promise.all(deletePromises)})}event.waitUntil(clearCacheIfDifferent(event,config).then(()=>self.clients.claim()))}),self.addEventListener("fetch",event=>{const request=event.request,url=new URL(request.url);if("GET"!==request.method||!0!==config.cacheRemote&&url.origin!==self.location.origin||config.blacklistCacheItems.length>0&&-1!==config.blacklistCacheItems.indexOf(url.pathname))return;let cacheKey,resourceType="content";/(.jpg|.jpeg|.webp|.png|.svg|.gif)$/.test(url.pathname)?resourceType="image":/.\/fonts.(?:googleapis|gstatic).com/.test(url.origin)&&(resourceType="font"),cacheKey=cacheName(resourceType,config),"content"===resourceType?event.respondWith(fetch(request).then(response=>addToCache(cacheKey,request,response)).catch(()=>fetchFromCache(event)).catch(()=>offlineResponse(resourceType,config))):event.respondWith(fetchFromCache(event).catch(()=>fetch(request)).then(response=>addToCache(cacheKey,request,response)).catch(()=>offlineResponse(resourceType,config)))}),self.addEventListener("backgroundfetchsuccess",event=>{console.log("[Service Worker]: Background Fetch Success",event.registration),event.waitUntil(async function(){try{const cache=await caches.open(event.registration.id),records=await event.registration.matchAll(),promises=records.map(async record=>{const response=await record.responseReady;await cache.put(record.request,response)});await Promise.all(promises)}catch(err){console.error(err)}}())}),self.addEventListener("install",event=>{console.log("??","install",event),self.skipWaiting()}),self.addEventListener("activate",event=>(console.log("??","activate",event),self.clients.claim())),self.addEventListener("fetch",(function(event){event.respondWith(fetch(event.request))}));